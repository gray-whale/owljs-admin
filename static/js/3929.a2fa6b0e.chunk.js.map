{"version":3,"file":"static/js/3929.a2fa6b0e.chunk.js","mappings":"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","sources":["components/FilterHeader/index.tsx","views/web/resource/list/index.tsx","api/modules/web/resource.ts"],"sourcesContent":["import { PlusOutlined } from \"@ant-design/icons\";\nimport { Button, Card, DatePicker, Popover, Tag } from \"antd\";\nimport dayjs from 'dayjs';\nimport type { Dayjs } from 'dayjs';\nimport './index.less'\n\nconst { RangePicker } = DatePicker;\n\nconst FilterHeader = ({ data }: any) => {\n\n    const rangePresets: {\n        label: string;\n        value: [Dayjs, Dayjs];\n    }[] = [\n            { label: '最近30分钟', value: [dayjs().add(-30, 'minute'), dayjs()] },\n            { label: '最近1小时', value: [dayjs().add(-1, 'h'), dayjs()] },\n            { label: '最近3小时', value: [dayjs().add(-7, 'h'), dayjs()] },\n            { label: '最近1天', value: [dayjs().add(-1, 'd'), dayjs()] },\n            { label: '最近3天', value: [dayjs().add(-3, 'd'), dayjs()] },\n            { label: '最近7天', value: [dayjs().add(-7, 'd'), dayjs()] },\n            { label: '最近1个月', value: [dayjs().add(-1, 'M'), dayjs()] },\n        ];\n\n    const onRangeChange = (dates: null | (Dayjs | null)[], dateStrings: string[]) => {\n        if (dates) {\n            console.log('From: ', dates[0], ', to: ', dates[1]);\n            console.log('From: ', dateStrings[0], ', to: ', dateStrings[1]);\n        } else {\n            console.log('Clear');\n        }\n    };\n\n    const tagList = ['pid', '浏览器', '浏览器版本', '系统', '系统版本', '国家/地区', '省份', '城市', 'IP', '品牌', '机型', '页面url', 'session_id', 'view_id', 'env', 'release', 'use_agent', '请求参数', '网络类型', 'use_id', 'device_id'];\n\n    const content = (\n        <div style={{ maxWidth: '400px' }}>\n            {\n                tagList.map(item => { return (<Tag key={item} color=\"blue\" className=\"filter-header-tag\">{item}</Tag>) })\n            }\n        </div>\n    );\n    return (\n        <Card>\n            <RangePicker showTime presets={rangePresets} onChange={onRangeChange} defaultValue={[dayjs().add(-1, 'd'), dayjs()]} />\n\n\n            <Popover placement=\"bottomLeft\" trigger='click' content={content} arrow={false}>\n                <Button icon={<PlusOutlined />} style={{ marginLeft: '8px' }}>筛选条件</Button>\n            </Popover>\n        </Card>\n    );\n};\n\nexport default FilterHeader;","import { getResourceList } from \"@/api/modules/web/resource\";\nimport FilterHeader from \"@/components/FilterHeader\";\nimport { Card, message } from \"antd\";\nimport Table, { ColumnsType } from \"antd/es/table\";\nimport { useEffect, useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\n\ninterface DataType {\n    key: React.Key;\n    name: string;\n    entryType: string;\n    startTime: string;\n    duration: string;\n    // initiatorType: string;\n    // nextHopProtocol: string;\n    // renderBlockingStatus: string;\n    // workerStart: string;\n    // redirectStart: string;\n    // redirectEnd: string;\n    // fetchStart: string;\n    // domainLookupStart: string;\n    // domainLookupEnd: string;\n    // connectStart: string;\n    // secureConnectionStart: string;\n    // connectEnd: string;\n    // requestStart: string;\n    // responseStart: string;\n    // responseEnd: string;\n    // transferSize: string;\n    // encodedBodySize: string;\n    // decodedBodySize: string;\n    // responseStatus: string;\n    // serverTiming: string;\n}\n\nconst ResourceList = () => {\n\n    const [pageNum, setPageNum] = useState(1);\n    const [pageSize, setPageSize] = useState(10);\n    const [resourceTotal, setResourceTotal] = useState(0);\n    const [resourceList, setResourceList] = useState<DataType[]>([]);\n    const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);\n    const [searchParams] = useSearchParams();\n    const [messageApi, contextHolder] = message.useMessage();\n\n    const columns: ColumnsType<DataType> = [\n        {\n            title: '静态资源路径',\n            dataIndex: 'name',\n            width: 100,\n        },\n        {\n            title: 'entryType',\n            dataIndex: 'entryType',\n            width: 200,\n        },\n        {\n            title: '资源请求时间',\n            dataIndex: 'startTime',\n            width: 200,\n        },\n        {\n            title: '资源请求耗时',\n            dataIndex: 'duration',\n            width: 200,\n        },\n    ];\n\n    const onSelectChange = (newSelectedRowKeys: React.Key[]) => {\n        setSelectedRowKeys(newSelectedRowKeys);\n    };\n\n    const rowSelection = {\n        selectedRowKeys,\n        onChange: onSelectChange,\n    };\n\n    const initResourceList = async () => {\n        const appId = searchParams.get('appId');\n        if (!appId) {\n            messageApi.open({\n                type: 'error',\n                content: 'appId不能为空!',\n            });\n            return;\n        }\n        const result = await getResourceList({ pageNum, pageSize, appId });\n        if (result.data) {\n            setResourceTotal(result.data.total);\n            const data: DataType[] = [];\n            result.data.data.forEach(item => {\n                data.push({\n                    key: item.resourceId,\n                    name: item.name,\n                    entryType: item.entryType,\n                    startTime: item.startTime,\n                    duration: item.duration\n                })\n            });\n            setResourceList(data);\n        }\n    };\n\n    useEffect(() => {\n        initResourceList();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        initResourceList();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [pageNum, pageSize])\n\n    const pagination = {\n        showSizeChanger: true,\n        onChange: (page: number, pageSize: number) => {\n            setPageNum(page);\n            setPageSize(pageSize);\n        },\n        defaultCurrent: pageNum,\n        total: resourceTotal\n    }\n\n    return (<div>\n        <FilterHeader></FilterHeader>\n        <Card style={{ marginTop: '16px' }} title=\"静态资源列表\">{contextHolder}<Table style={{ marginTop: '12px' }} rowSelection={rowSelection} pagination={pagination} columns={columns} dataSource={resourceList} /></Card>\n    </div>);\n}\n\nexport default ResourceList;","\nimport { ResPage } from \"@/api/interface\";\nimport http from \"../../index\"\nimport { ReqQuery, ResResource } from \"@/api/interface/web/resource\";\n\n// 获取静态资源列表\nexport const getResourceList = (params: ReqQuery) => {\n    return http.get<ResPage<ResResource>>('web/resource', params);\n};"],"names":["RangePicker","DatePicker","_ref","data","rangePresets","label","value","dayjs","add","content","_jsx","style","maxWidth","children","map","item","Tag","color","className","_jsxs","Card","showTime","presets","onChange","dates","dateStrings","console","log","defaultValue","Popover","placement","trigger","arrow","Button","icon","PlusOutlined","marginLeft","_useState","useState","_useState2","_slicedToArray","pageNum","setPageNum","_useState3","_useState4","pageSize","setPageSize","_useState5","_useState6","resourceTotal","setResourceTotal","_useState7","_useState8","resourceList","setResourceList","_useState9","_useState10","selectedRowKeys","setSelectedRowKeys","_useSearchParams","useSearchParams","searchParams","_message$useMessage","message","useMessage","_message$useMessage2","messageApi","contextHolder","rowSelection","newSelectedRowKeys","initResourceList","_asyncToGenerator","_regeneratorRuntime","mark","_callee","appId","result","wrap","_context","prev","next","get","open","type","abrupt","params","http","sent","total","forEach","push","key","resourceId","name","entryType","startTime","duration","stop","apply","arguments","useEffect","pagination","showSizeChanger","page","defaultCurrent","FilterHeader","marginTop","title","Table","columns","dataIndex","width","dataSource"],"sourceRoot":""}