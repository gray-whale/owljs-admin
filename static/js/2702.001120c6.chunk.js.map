{"version":3,"file":"static/js/2702.001120c6.chunk.js","mappings":"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","sources":["components/FilterHeader/index.tsx","views/web/request/list/index.tsx","api/modules/web/request.ts"],"sourcesContent":["import { PlusOutlined } from \"@ant-design/icons\";\nimport { Button, Card, DatePicker, Popover, Tag } from \"antd\";\nimport dayjs from 'dayjs';\nimport type { Dayjs } from 'dayjs';\nimport './index.less'\n\nconst { RangePicker } = DatePicker;\n\nconst FilterHeader = ({ data }: any) => {\n\n    const rangePresets: {\n        label: string;\n        value: [Dayjs, Dayjs];\n    }[] = [\n            { label: '最近30分钟', value: [dayjs().add(-30, 'minute'), dayjs()] },\n            { label: '最近1小时', value: [dayjs().add(-1, 'h'), dayjs()] },\n            { label: '最近3小时', value: [dayjs().add(-7, 'h'), dayjs()] },\n            { label: '最近1天', value: [dayjs().add(-1, 'd'), dayjs()] },\n            { label: '最近3天', value: [dayjs().add(-3, 'd'), dayjs()] },\n            { label: '最近7天', value: [dayjs().add(-7, 'd'), dayjs()] },\n            { label: '最近1个月', value: [dayjs().add(-1, 'M'), dayjs()] },\n        ];\n\n    const onRangeChange = (dates: null | (Dayjs | null)[], dateStrings: string[]) => {\n        if (dates) {\n            console.log('From: ', dates[0], ', to: ', dates[1]);\n            console.log('From: ', dateStrings[0], ', to: ', dateStrings[1]);\n        } else {\n            console.log('Clear');\n        }\n    };\n\n    const tagList = ['pid', '浏览器', '浏览器版本', '系统', '系统版本', '国家/地区', '省份', '城市', 'IP', '品牌', '机型', '页面url', 'session_id', 'view_id', 'env', 'release', 'use_agent', '请求参数', '网络类型', 'use_id', 'device_id'];\n\n    const content = (\n        <div style={{ maxWidth: '400px' }}>\n            {\n                tagList.map(item => { return (<Tag key={item} color=\"blue\" className=\"filter-header-tag\">{item}</Tag>) })\n            }\n        </div>\n    );\n    return (\n        <Card>\n            <RangePicker showTime presets={rangePresets} onChange={onRangeChange} defaultValue={[dayjs().add(-1, 'd'), dayjs()]} />\n\n\n            <Popover placement=\"bottomLeft\" trigger='click' content={content} arrow={false}>\n                <Button icon={<PlusOutlined />} style={{ marginLeft: '8px' }}>筛选条件</Button>\n            </Popover>\n        </Card>\n    );\n};\n\nexport default FilterHeader;","import { getRequestList } from \"@/api/modules/web/request\";\nimport FilterHeader from \"@/components/FilterHeader\";\nimport { List, Typography, Tag, message } from \"antd\";\nimport { useEffect, useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport \"./index.less\";\nimport { ProCard, StatisticCard } from \"@ant-design/pro-components\";\nimport Title from \"antd/es/typography/Title\";\nimport { ResRequest } from \"@/api/interface/web/request\";\nimport Paragraph from \"antd/es/typography/Paragraph\";\nconst { Divider } = StatisticCard;\nconst { Text } = Typography;\n\nconst RequestList = () => {\n    const [pageNum, setPageNum] = useState(1);\n    const [pageSize, setPageSize] = useState(10);\n    const [selectItem, setSelectItem] = useState<ResRequest>();\n    const [requestTotal, setRequestTotal] = useState(0);\n    const [requestList, setRequestList] = useState<ResRequest[]>([]);\n    const [searchParams] = useSearchParams();\n    const [messageApi, contextHolder] = message.useMessage();\n\n    const initRequestList = async () => {\n        const appId = searchParams.get('appId');\n        if (!appId) {\n            messageApi.open({\n                type: 'error',\n                content: 'appId不能为空!',\n            });\n            return;\n        }\n        const result = await getRequestList({ pageNum, pageSize, appId });\n        if (result.data) {\n            setRequestTotal(result.data.total);\n            const data: ResRequest[] = [];\n            result.data.data.forEach(item => {\n                data.push(item);\n            });\n            setSelectItem(data[0]);\n            setRequestList(data);\n        }\n    };\n\n    useEffect(() => {\n        initRequestList();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        initRequestList();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [pageNum, pageSize])\n\n    const pagination = {\n        showSizeChanger: false,\n        onChange: (page: number, pageSize: number) => {\n            setPageNum(page);\n            setPageSize(pageSize);\n        },\n        defaultCurrent: pageNum,\n        total: requestTotal\n    }\n\n    return (<div>\n        <FilterHeader></FilterHeader>\n        <div style={{ marginTop: '16px', display: 'flex', flexDirection: 'row' }}>{contextHolder}\n            <List\n                className=\"request-list\"\n                itemLayout=\"vertical\"\n                size=\"default\"\n                pagination={pagination}\n                bordered={true}\n                dataSource={requestList}\n                renderItem={(item) => (\n                    <List.Item key={item.requestId} className={selectItem?.requestId === item.requestId ? \"selected\" : \"\"} onClick={() => { setSelectItem(item) }}>\n                        <div className=\"request-item\">\n                            <div className=\"request-item__left\">\n                                <div>\n                                    <Tag bordered={false}>{item.requestMethod}</Tag>{new URL(item.requestUrl).hostname}\n                                </div>\n                                <div style={{ marginTop: '8px' }}>\n                                    {new URL(item.requestUrl).pathname}\n                                </div>\n                            </div>\n                            <div className=\"request-item__right\">\n                                <Text type=\"success\">90</Text>\n                            </div>\n                        </div>\n                    </List.Item>\n                )}\n            />\n            <div className=\"content\">\n                <ProCard bordered>\n                    <div>\n                        <Title level={5}>请求路径：</Title>\n                        <Paragraph>\n                            {selectItem?.requestUrl}\n                        </Paragraph>\n                        <StatisticCard.Group>\n                            <StatisticCard\n                                statistic={{\n                                    title: '请求数',\n                                    value: 10,\n                                }}\n                            />\n                            <Divider />\n                            <StatisticCard\n                                statistic={{\n                                    title: '用户数',\n                                    value: 10,\n                                }}\n                            />\n                            <Divider />\n                            <StatisticCard\n                                statistic={{\n                                    title: '慢请求数',\n                                    value: 10,\n                                }}\n                            />\n                            <Divider />\n                        </StatisticCard.Group>\n                    </div>\n                </ProCard>\n            </div>\n        </div>\n    </div>);\n}\n\nexport default RequestList;","import { ReqQuery, ResRequest } from \"@/api/interface/web/request\";\nimport http from \"../../index\"\nimport { ResPage } from \"../../interface\";\n\n// 获取请求列表\nexport const getRequestList = (params: ReqQuery) => {\n    return http.get<ResPage<ResRequest>>('web/request', params);\n};"],"names":["RangePicker","DatePicker","_ref","data","rangePresets","label","value","dayjs","add","content","_jsx","style","maxWidth","children","map","item","Tag","color","className","_jsxs","Card","showTime","presets","onChange","onRangeChange","dates","dateStrings","console","log","defaultValue","Popover","placement","trigger","arrow","Button","icon","PlusOutlined","marginLeft","Divider","StatisticCard","Text","Typography","RequestList","pageNum","setPageNum","useState","pageSize","setPageSize","selectItem","setSelectItem","requestTotal","setRequestTotal","requestList","setRequestList","searchParams","useSearchParams","messageApi","contextHolder","message","useMessage","initRequestList","async","appId","get","open","type","result","params","http","total","forEach","push","useEffect","pagination","showSizeChanger","page","defaultCurrent","FilterHeader","marginTop","display","flexDirection","List","itemLayout","size","bordered","dataSource","renderItem","Item","requestId","onClick","requestMethod","URL","requestUrl","hostname","pathname","ProCard","Title","level","Paragraph","Group","statistic","title"],"sourceRoot":""}