{"version":3,"file":"static/js/88.34416903.chunk.js","mappings":"gKAKaA,EAAe,SAACC,GACzB,OAAOC,EAAAA,EAAKC,IAAuB,QAASF,EAChD,C,sIC2FA,UApFkB,WACd,IAAAG,GAA8BC,EAAAA,EAAAA,UAAS,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAlCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAC1BI,GAAgCL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAArCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,GAAoCT,EAAAA,EAAAA,UAAS,GAAEU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAxCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,GAAkCb,EAAAA,EAAAA,UAAqB,IAAGc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAAnDE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAA8CjB,EAAAA,EAAAA,UAAsB,IAAGkB,GAAAhB,EAAAA,EAAAA,GAAAe,EAAA,GAAhEE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAC1CG,GAAuBC,EAAAA,EAAAA,MAAhBC,GAAiCrB,EAAAA,EAAAA,GAAAmB,EAAA,GAArB,GACnBG,EAAoCC,EAAAA,GAAQC,aAAYC,GAAAzB,EAAAA,EAAAA,GAAAsB,EAAA,GAAjDI,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAwB1BG,EAAe,CACjBX,gBAAAA,EACAY,SANmB,SAACC,GACpBZ,EAAmBY,EACvB,GAOMC,EAAa,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACsB,GAAlCN,EAAQhB,EAAazB,IAAI,SACpB,CAAD6C,EAAAE,KAAA,QAIH,OAHHjB,EAAWkB,KAAK,CACZC,KAAM,QACNC,QAAS,mCACVL,EAAAM,OAAA,wBAAAN,EAAAE,KAAA,GAGclD,EAAAA,EAAAA,GAAa,CAAEQ,QAAAA,EAASI,SAAAA,EAASgC,MAAAA,IAAS,KAAD,GAAxDC,EAAMG,EAAAO,MACDT,OACP7B,EAAc4B,EAAOC,KAAKU,OACpBV,EAAmB,GACzBD,EAAOC,KAAKA,KAAKW,SAAQ,SAAAC,GACrBZ,EAAKa,KAAK,CACNC,IAAKF,EAAKG,QACVC,KAAMJ,EAAKI,KACXC,QAASL,EAAKK,QACdC,WAAYN,EAAKM,YAEzB,IACA3C,EAAayB,IAChB,wBAAAE,EAAAiB,OAAA,GAAAtB,EAAA,KACJ,kBAvBkB,OAAAJ,EAAA2B,MAAA,KAAAC,UAAA,MAyBnBC,EAAAA,EAAAA,YAAU,WACN9B,GAEJ,GAAG,KAEH8B,EAAAA,EAAAA,YAAU,WACN9B,GAEJ,GAAG,CAAC9B,EAASI,IAEb,IAAMyD,EAAa,CACfC,iBAAiB,EACjBlC,SAAU,SAACmC,EAAc3D,GACrBH,EAAW8D,GACX1D,EAAYD,EAChB,EACA4D,eAAgBhE,EAChBgD,MAAOxC,GAGX,OAAQyD,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACC,MAAM,2BAAMC,SAAA,CAAE1C,GAAc2C,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CAACC,MAAO,CAAEC,UAAW,QAAU7C,aAAcA,EAAckC,WAAYA,EAAYY,QAxE5F,CACnC,CACIN,MAAO,qBACPO,UAAW,OACXC,MAAO,KAEX,CACIR,MAAO,iCACPO,UAAW,UACXC,MAAO,KAEX,CACIR,MAAO,6CACPO,UAAW,aACXC,MAAO,MA0DsIC,WAAYhE,MACrK,C","sources":["api/modules/web/event.ts","views/miniapp/custom/event/index.tsx"],"sourcesContent":["import http from \"../../index\"\nimport { ResPage } from \"../../interface\";\nimport { ReqQuery, ResEvent } from \"@/api/interface/web/event\";\n\n// 获取事件列表\nexport const getEventList = (params: ReqQuery) => {\n    return http.get<ResPage<ResEvent>>('event', params);\n};","import { getEventList } from \"@/api/modules/web/event\";\nimport { Card, message } from \"antd\";\nimport Table, { ColumnsType } from \"antd/es/table\";\nimport { useEffect, useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\n\n\ninterface DataType {\n    key: React.Key;\n    name: string;\n    metrics: string;\n    categories: string;\n}\n\nconst EventList = () => {\n    const [pageNum, setPageNum] = useState(1);\n    const [pageSize, setPageSize] = useState(10);\n    const [eventTotal, setEventTotal] = useState(0);\n    const [eventList, setEventList] = useState<DataType[]>([]);\n    const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);\n    const [searchParams] = useSearchParams();\n    const [messageApi, contextHolder] = message.useMessage();\n\n    const columns: ColumnsType<DataType> = [\n        {\n            title: '事件名',\n            dataIndex: 'name',\n            width: 100,\n        },\n        {\n            title: '自定义数值',\n            dataIndex: 'metrics',\n            width: 200,\n        },\n        {\n            title: '事件本身的维度',\n            dataIndex: 'categories',\n            width: 200,\n        },\n    ];\n\n    const onSelectChange = (newSelectedRowKeys: React.Key[]) => {\n        setSelectedRowKeys(newSelectedRowKeys);\n    };\n\n    const rowSelection = {\n        selectedRowKeys,\n        onChange: onSelectChange,\n    };\n\n    const initEventList = async () => {\n        const appId = searchParams.get('appId');\n        if (!appId) {\n            messageApi.open({\n                type: 'error',\n                content: 'appId不能为空!',\n            });\n            return;\n        }\n        const result = await getEventList({ pageNum, pageSize,appId });\n        if (result.data) {\n            setEventTotal(result.data.total);\n            const data: DataType[] = [];\n            result.data.data.forEach(item => {\n                data.push({\n                    key: item.eventId,\n                    name: item.name,\n                    metrics: item.metrics,\n                    categories: item.categories\n                })\n            });\n            setEventList(data);\n        }\n    };\n\n    useEffect(() => {\n        initEventList();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        initEventList();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [pageNum, pageSize])\n\n    const pagination = {\n        showSizeChanger: true,\n        onChange: (page: number, pageSize: number) => {\n            setPageNum(page);\n            setPageSize(pageSize);\n        },\n        defaultCurrent: pageNum,\n        total: eventTotal\n    }\n\n    return (<Card title=\"事件列表\">{contextHolder}<Table style={{ marginTop: '12px' }} rowSelection={rowSelection} pagination={pagination} columns={columns} dataSource={eventList} /></Card>);\n}\n\nexport default EventList;"],"names":["getEventList","params","http","get","_useState","useState","_useState2","_slicedToArray","pageNum","setPageNum","_useState3","_useState4","pageSize","setPageSize","_useState5","_useState6","eventTotal","setEventTotal","_useState7","_useState8","eventList","setEventList","_useState9","_useState10","selectedRowKeys","setSelectedRowKeys","_useSearchParams","useSearchParams","searchParams","_message$useMessage","message","useMessage","_message$useMessage2","messageApi","contextHolder","rowSelection","onChange","newSelectedRowKeys","initEventList","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","appId","result","data","wrap","_context","prev","next","open","type","content","abrupt","sent","total","forEach","item","push","key","eventId","name","metrics","categories","stop","apply","arguments","useEffect","pagination","showSizeChanger","page","defaultCurrent","_jsxs","Card","title","children","_jsx","Table","style","marginTop","columns","dataIndex","width","dataSource"],"sourceRoot":""}